---
description: 
globs: 
alwaysApply: true
---
Rust Windows 程式設計規則 - 使用 windows-rs 和 WMI

您是一位專精於 Rust Windows 程式設計、windows-rs 和 WMI 的專家開發者。

核心原則
- 編寫安全、高效的 Rust 程式碼，充分利用 windows-rs 和 WMI 功能
- 使用繁體中文進行溝通和討論
- 使用英文撰寫程式碼註解和文檔
- 遵循 Rust 的所有權和借用檢查器原則
- 優先考慮記憶體安全和執行緒安全
- 適當處理 Windows API 錯誤和異常情況
- 採用漸進式開發方式，避免一次性大量修改

開發流程
1. 設計階段：討論 Windows API 使用方案和架構設計
2. 漸進式實作：每次實作單一功能模組
3. 錯誤處理：確保所有 Windows API 呼叫都有適當的錯誤處理
4. 測試驗證：在不同 Windows 版本上測試功能

程式碼風格和結構
- 使用標準 Rust 命名慣例（snake_case for functions/variables, PascalCase for types）
- 適當使用 Result<T, E> 進行錯誤處理
- 使用 unsafe 時必須添加詳細的安全性註解
- 模組化設計，將不同 Windows 功能分離到不同模組
- 使用 #[cfg(windows)] 確保程式碼只在 Windows 平台編譯

專案結構
src/
├── main.rs              # 主程式入口
├── lib.rs               # 庫入口
├── windows/             # Windows API 封裝
│   ├── mod.rs
│   ├── registry.rs      # 註冊表操作
│   ├── process.rs       # 程序管理
│   ├── service.rs       # 服務管理
│   ├── file_system.rs   # 檔案系統操作
│   └── system_info.rs   # 系統資訊
├── wmi/                 # WMI 相關功能
│   ├── mod.rs
│   ├── query.rs         # WMI 查詢
│   ├── events.rs        # WMI 事件
│   └── providers.rs     # WMI 提供者
├── utils/               # 工具函數
│   ├── mod.rs
│   ├── error.rs         # 錯誤處理
│   └── conversion.rs    # 型別轉換
└── tests/               # 測試模組

Cargo.toml 依賴配置
[dependencies]
windows = { version = "0.52", features = [
    "Win32_Foundation",
    "Win32_System_Registry",
    "Win32_System_ProcessStatus",
    "Win32_System_Services",
    "Win32_Storage_FileSystem",
    "Win32_System_SystemInformation",
    "Win32_Security",
    "Win32_System_Threading"
]}
wmi = "0.17"
tokio = { version = "1.0", features = ["full"] }
serde = { version = "1.0", features = ["derive"] }
anyhow = "1.0"
log = "0.4"

windows-rs 使用範例
- 基本 Windows API 呼叫：
  use windows::{
      core::*,
      Win32::Foundation::*,
      Win32::System::Registry::*,
  };

  /// Get registry value from HKEY_LOCAL_MACHINE
  pub fn get_registry_value(subkey: &str, value_name: &str) -> Result<String> {
      unsafe {
          let mut key = HKEY::default();
          
          // Open registry key
          RegOpenKeyExW(
              HKEY_LOCAL_MACHINE,
              &HSTRING::from(subkey),
              0,
              KEY_READ,
              &mut key,
          )?;
          
          // Query value size
          let mut data_size = 0u32;
          RegQueryValueExW(
              key,
              &HSTRING::from(value_name),
              None,
              None,
              None,
              Some(&mut data_size),
          )?;
          
          // Read value data
          let mut buffer = vec![0u16; (data_size / 2) as usize];
          RegQueryValueExW(
              key,
              &HSTRING::from(value_name),
              None,
              None,
              Some(buffer.as_mut_ptr() as *mut u8),
              Some(&mut data_size),
          )?;
          
          RegCloseKey(key)?;
          
          // Convert to String
          let result = String::from_utf16_lossy(&buffer);
          Ok(result.trim_end_matches('\0').to_string())
      }
  }

- 程序管理範例：
  use windows::{
      Win32::System::ProcessStatus::*,
      Win32::System::Threading::*,
  };

  /// Get list of running processes
  pub fn get_process_list() -> Result<Vec<ProcessInfo>> {
      let mut processes = Vec::new();
      let mut process_ids = vec![0u32; 1024];
      let mut bytes_returned = 0u32;
      
      unsafe {
          EnumProcesses(
              process_ids.as_mut_ptr(),
              (process_ids.len() * std::mem::size_of::<u32>()) as u32,
              &mut bytes_returned,
          )?;
          
          let count = bytes_returned as usize / std::mem::size_of::<u32>();
          
          for &pid in &process_ids[..count] {
              if let Ok(info) = get_process_info(pid) {
                  processes.push(info);
              }
          }
      }
      
      Ok(processes)
  }

WMI 使用範例
- 基本 WMI 查詢：
  use wmi::{COMLibrary, WMIConnection, Variant};
  use serde::Deserialize;

  #[derive(Deserialize, Debug)]
  struct Win32_Process {
      #[serde(rename = "ProcessId")]
      process_id: Option<u32>,
      #[serde(rename = "Name")]
      name: Option<String>,
      #[serde(rename = "ExecutablePath")]
      executable_path: Option<String>,
  }

  /// Query running processes using WMI
  pub async fn query_processes_wmi() -> Result<Vec<Win32_Process>> {
      let com_con = COMLibrary::new()?;
      let wmi_con = WMIConnection::new(com_con.into())?;
      
      let results: Vec<Win32_Process> = wmi_con
          .raw_query("SELECT ProcessId, Name, ExecutablePath FROM Win32_Process")?;
      
      Ok(results)
  }

- WMI 事件監聽：
  /// Monitor process creation events
  pub async fn monitor_process_events() -> Result<()> {
      let com_con = COMLibrary::new()?;
      let wmi_con = WMIConnection::new(com_con.into())?;
      
      let iterator = wmi_con.notification_query(
          "SELECT * FROM Win32_ProcessStartTrace"
      )?;
      
      for event in iterator {
          match event {
              Ok(event_data) => {
                  println!("New process started: {:?}", event_data);
              }
              Err(e) => {
                  eprintln!("Error receiving event: {}", e);
              }
          }
      }
      
      Ok(())
  }

錯誤處理模式
- 統一錯誤型別：
  use anyhow::{Result, Context};
  use windows::core::Error as WindowsError;

  #[derive(Debug, thiserror::Error)]
  pub enum WindowsApiError {
      #[error("Windows API error: {0}")]
      WindowsError(#[from] WindowsError),
      
      #[error("WMI error: {0}")]
      WmiError(#[from] wmi::WMIError),
      
      #[error("Registry operation failed: {message}")]
      RegistryError { message: String },
      
      #[error("Process operation failed: {message}")]
      ProcessError { message: String },
  }

- 錯誤處理範例：
  /// Safe wrapper for Windows API calls
  pub fn safe_api_call<F, T>(operation: F, context: &str) -> Result<T>
  where
      F: FnOnce() -> windows::core::Result<T>,
  {
      operation()
          .map_err(WindowsApiError::from)
          .with_context(|| format!("Failed to {}", context))
  }

安全性考量
- 使用 unsafe 時的安全檢查：
  /// # Safety
  /// This function is safe when:
  /// - The handle is valid and not null
  /// - The buffer has sufficient capacity
  /// - The caller ensures proper synchronization
  unsafe fn read_memory_safe(handle: HANDLE, buffer: &mut [u8]) -> Result<usize> {
      // Validate handle
      if handle.is_invalid() {
          return Err(anyhow::anyhow!("Invalid handle provided"));
      }
      
      // Validate buffer
      if buffer.is_empty() {
          return Err(anyhow::anyhow!("Empty buffer provided"));
      }
      
      // Perform the operation
      let mut bytes_read = 0usize;
      ReadProcessMemory(
          handle,
          std::ptr::null(),
          buffer.as_mut_ptr() as *mut _,
          buffer.len(),
          Some(&mut bytes_read),
      )?;
      
      Ok(bytes_read)
  }

效能最佳化
- 使用物件池減少 COM 物件建立開銷
- 批次處理 WMI 查詢以減少網路呼叫
- 適當使用快取機制
- 避免在迴圈中重複建立 WMI 連線

測試策略
- 單元測試範例：
  #[cfg(test)]
  mod tests {
      use super::*;
      
      #[test]
      fn test_registry_read() {
          // Test reading a known registry value
          let result = get_registry_value(
              "SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion",
              "ProductName"
          );
          
          assert!(result.is_ok());
          let product_name = result.unwrap();
          assert!(!product_name.is_empty());
      }
      
      #[tokio::test]
      async fn test_wmi_query() {
          let processes = query_processes_wmi().await;
          assert!(processes.is_ok());
          
          let process_list = processes.unwrap();
          assert!(!process_list.is_empty());
      }
  }

日誌和除錯
- 使用結構化日誌：
  use log::{info, warn, error, debug};

  /// Initialize logging for Windows application
  pub fn init_logging() -> Result<()> {
      env_logger::Builder::from_default_env()
          .filter_level(log::LevelFilter::Info)
          .init();
      
      info!("Windows application logging initialized");
      Ok(())
  }

關鍵慣例
1. 始終檢查 Windows API 的回傳值
2. 適當處理 Unicode 字串轉換
3. 使用 RAII 模式管理 Windows 資源
4. 避免長時間持有 Windows 控制代碼
5. 在多執行緒環境中注意 COM 初始化
6. 使用適當的權限檢查
7. 定期測試不同 Windows 版本的相容性

文件參考
- windows-rs GitHub: https://github.com/microsoft/windows-rs
- windows-rs API 文件: https://microsoft.github.io/windows-docs-rs/doc/windows/
- WMI crate 文件: https://docs.rs/wmi/0.17.2/wmi/
- Windows WMI https://learn.microsoft.com/zh-tw/windows/win32/wmisdk/wmi-start-page
- Windows API 官方文件: https://docs.microsoft.com/en-us/windows/win32/


在開始實作前，請先確認所需的 Windows API 權限和相容性需求。每次修改請專注於單一功能模組，並確保適當的錯誤處理和測試覆蓋率。